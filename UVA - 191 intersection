// Author: Omar_Elaraby

#include <bits/stdc++.h>
using namespace std;

#define Vector Point
#define T long long

class Point;
T dot(const Vector &a, const Vector &b);
T cross(const Vector &a, const Vector &b);
T orient(const Point &o, const Point &a, const Point &b);

class Point {
public:
	T x, y;

	Point() : x(0), y(0) {
	}
	Point(const T a, const T b) : x(a), y(b) {
	}
	Point(const Point &other) {
		x = other.x;
		y = other.y;
	}

	Point& operator=(const Point &other) {
		x = other.x;
		y = other.y;
		return *this;
	}
	Point operator-(const Point &p) const {
		return Point(x - p.x, y - p.y);
	}

	bool onDisk(const Point &a, const Point &b) const {
		return dot(a - *this, b - *this) <= 0;
	}

	bool onSeg(const Point &a, const Point &b) const {
		return (!orient(a, b, *this) && this->onDisk(a, b));
	}
};

istream& operator>>(istream &in, Point &p) {
	return in >> p.x >> p.y;
}

T dot(const Vector &a, const Vector &b) {
	return a.x * b.x + a.y * b.y;
}

T cross(const Vector &a, const Vector &b) {
	return a.x * b.y - b.x * a.y;
}

T orient(const Point &o, const Point &a, const Point &b) {
	return cross(a - o, b - o);
}

bool segSegX(const Point &a, const Point &b, const Point &c, const Point &d) {
	T oa = orient(d, c, a);
	T ob = orient(d, c, b);
	T oc = orient(a, b, c);
	T od = orient(a, b, d);

	if (oa * ob < 0 && od * oc < 0) return true;

	return (a.onSeg(c, d) || b.onSeg(c, d) || c.onSeg(a, b) || d.onSeg(a, b));
}

bool isInsideRect(const Point &p, const vector<Point> &rect) {
	int mnX = rect[0].x;
	int mxX = rect[2].x;
	int mnY = rect[2].y;
	int mxY = rect[0].y;

	return (p.x >= mnX && p.x <= mxX && p.y >= mnY && p.y <= mxY);
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int tt;
	cin >> tt;
	while (tt--) {
		vector<Point> seg(2);
		cin >> seg[0] >> seg[1];

		vector<Point> rect(4);
		cin >> rect[0] >> rect[2];
		if (rect[0].x > rect[2].x) swap(rect[0].x, rect[2].x);
		if (rect[0].y < rect[2].y) swap(rect[0].y, rect[2].y);
		rect[1] = Point(rect[0].x, rect[2].y);
		rect[3] = Point(rect[2].x, rect[0].y);

		bool inter = false;
		for (int i = 0; i < rect.size(); ++i) {
			inter |= segSegX(rect[i], rect[(i + 1) % 4], seg[0], seg[1]);
		}

		for (int i = 0; i < 2; ++i) {
			inter |= isInsideRect(seg[i], rect);
		}

		cout << (inter ? "T\n" : "F\n");
	}

	return 0;
}
